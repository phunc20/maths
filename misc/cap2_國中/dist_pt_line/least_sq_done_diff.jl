### A Pluto.jl notebook ###
# v0.14.8

using Markdown
using InteractiveUtils

# ╔═╡ 4d813b8c-dd9e-11eb-1131-7d43433427ed
md"""
# Least Squares Done Differently
我原本是在做這個 **_"有點不一樣的最小平方差 "_** 的推導; 期間發現一個可以說是國中數學的東西. 因爲自己國中數學也是學得 ly ly lác lạc, 這部分當初也沒有弄得清楚, 所以想說把它寫下來, 看看有沒有可能造福現在或未來的國中生.

想法是這樣的, 原本的, 最基本的最小平方差 (least square errors) 是有一堆點 ``(x_{k}, y_{k}), k = 1, \ldots, n`` 在二維平面 ``\mathbb{R}^2`` 上, 我們試圖找一條直線使得各個點 ``(x_{k}, y_{k})`` 的 ``y`` 方向的投影距離平方的和最小. 對於任意一條斜線 ``y = ax + b``, 我們剛纔所說的相當於
```math
\min_{a,\,b} \left(\sum_{k=1}^{n} \,\lvert y_{k} - (ax_{k} + b) \rvert^{2} \right)\,.
```

對於上述的問題, 文獻裏有很多的討論, 也被視作很基本的數學. 我想做的推導, 也不是很有新意, 只是更年輕的時候就有想過或看到過, 但一直沒有花時間把它弄明白: 與其用 ``y`` 方向的投影距離, 爲何我們不直接用各點 ``(x_{k}, y_{k})`` 到直線的距離和 (或距離平方和), 然後尋找最小化這個和的直線?

如果把 ``d_{L}: (x, y) \in \mathbb{R}^2 \mapsto \mathbb{R}`` 定義爲將平面上各點打到該點到直線 ``L`` 的距離的函數, 那麼我們要探討的問題就相當於
```math
\min_{L} \left(\sum_{k=1}^{n} \,d_{L}(x_k, y_k)^{2} \right)\,.
```
"""

# ╔═╡ 98155677-1c37-4a4c-ae51-704c9bab9083
md"""
## 所以..., 國中的問題在哪裏?
嗯, 抱歉, 前情提要拖得有點長. 國中數學的部分就在於
> 如何找平面上給定一點 ``(x_0, y_0)`` 到一給定直線 ``L: ax + by = c`` 的距離.

換句話說, 也就是在找上面提到的函數 ``d_L\,.``
"""

# ╔═╡ Cell order:
# ╟─4d813b8c-dd9e-11eb-1131-7d43433427ed
# ╟─98155677-1c37-4a4c-ae51-704c9bab9083
